// Generated by CoffeeScript 1.6.3

  /*
  特殊な回数カウント系称号
  称号名:
      names:
          5:"5回の称号"
      func:(game)->   #gameDBデータを渡されるのでカウント数を返す falseとかnullは0
  */
 //Shared.gameから引用（変化する?）
  __indexOf=[].indexOf;
  teams={
    Human:["Human","Diviner","Psychic","Guard","Couple","Poisoner","ToughGuy","Noble","Slave","Magician","Fugitive","Merchant","QueenSpectator","MadWolf","Liar","Copier","Light","Cursed","ApprenticeSeer","Diseased","Spellcaster","Lycan","Priest","Prince","PI","Cat","Witch","Oldman","OccultMania","Dog","Dictator","SeersMama","Trapper"],
    Werewolf:["Werewolf","Madman","BigWolf","Fanatic","Spy","WolfDiviner","Spy2","Sorcerer","LoneWolf","MinionSelector","WolfCub","WhisperingMad","WolfBoy"],
    Fox:["Fox","TinyFox","Immoral"],
    Devil:["Devil"],
    Friend:["Cupid","Lover"],
    Others:["Bat","Stalker","Doppleganger","CultLeader","Vampire","Tanner","Thief","Hoodlum","QuantumPlayer"],
    Neet:["Neet"],
  };
  blacks=["Werewolf","WolfDiviner","MadWolf","Lycan","LoneWolf","WolfCub","Dog"];
			

  Object.defineProperty(Array.prototype, "sum", {
    value: function(callback) {
      return this.map(callback).reduce((function(a, b) {
        return a + b;
      }), 0);
    }
  });

  getpl = function(game, userid) {
    return game.players.filter(function(x) {
      return x.id === userid;
    })[0];
  };

  getplreal = function(game, userid) {
    return game.players.filter(function(x) {
      return x.realid === userid;
    })[0];
  };

  chkCmplType = function(obj, cmpltype) {
    if (obj.isCmplType != null) {
      return obj.isCmplType(cmpltype);
    }
    if (obj.type === "Complex") {
      return obj.Complex_type === cmpltype || chkCmplType(obj.Complex_main, cmpltype);
    } else {
      return false;
    }
  };

  getType = function(pl) {
    if (pl.type === "Complex") {
      return getType(pl.Complex_main);
    } else {
      return pl.type;
    }
  };

  getOriginalType = function(game, userid) {
    return getTypeAtTime(game, userid, 0);
  };
  exports.getOriginalType=getOriginalType;

  getTypeAtTime = function(game, userid, day) {
    var id, ls, pl, _ref, _ref1;
    id = (pl = getpl(game, userid)).id;
    ls = game.gamelogs.filter(function(x) {
      return x.event === "transform" && x.id === id && x.day > day;
    });
    return (_ref = (_ref1 = ls[0]) != null ? _ref1.type : void 0) != null ? _ref : getType(pl);
  };

  getTeamByType = function(type) {
    var arr, name, _ref;
    _ref = teams;
    for (name in _ref) {
      arr = _ref[name];
      if (__indexOf.call(arr, type) >= 0) {
        return name;
      }
    }
    return "";
  };
  exports.getTeamByType=getTeamByType;

  exports.counterprize = {
    cursekill: {
      names: {
        5: "スナイパー",
        15: "狐の天敵",
        30: "魔弾の狙撃手",
        50: "疾風怒濤の極大射程"
      },
      func: function(game, pl) {
        return game.gamelogs.filter(function(x) {
          return x.id === pl.id && x.event === "cursekill";
        }).length;
      }
    },
    divineblack2: {
      names: {
        3: "千里眼",
        10: "心眼"
      },
      func: function(game, pl) {
        return game.gamelogs.filter(function(x) {
          var _ref;
          return x.id === pl.id && x.event === "divine" && (_ref = x.flag, __indexOf.call(blacks, _ref) >= 0);
        }).length;
      }
    },
    GJ: {
      names: {
        5: "防御の達人",
        10: "鉄壁",
        30: "村の救世主",
        50: "歴戦のガーディアン"
      },
      func: function(game, pl) {
        return game.gamelogs.filter(function(x) {
          return x.id === pl.id && x.event === "GJ";
        }).length;
      }
    },
    lovers_wincount: {
      names: {
        5: "両思い",
        10: "ラブラブカップル",
        20: "婚約",
        30: "結婚",
        50: "ベストカップル"
      },
      func: function(game, pl) {
        if (pl.winner && chkCmplType(pl, "Friend")) {
          return 1;
        } else {
          return 0;
        }
      }
    },
    lovers_losecount: {
      names: {
        10: "失恋",
        30: "離婚"
      },
      func: function(game, pl) {
        if (!pl.winner && chkCmplType(pl, "Friend")) {
          return 1;
        } else {
          return 0;
        }
      }
    },
    getkits_merchant: {
      names: {
        10: "お得意様"
      },
      func: function(game, pl) {
        return game.gamelogs.filter(function(x) {
          return x.target === pl.id && x.event === "sendkit";
        }).length;
      }
    },
    sendkits_to_wolves: {
      names: {
        10: "発注ミス"
      },
      func: function(game, pl) {
        return game.gamelogs.filter(function(x) {
          return x.id === pl.id && x.event === "sendkit" && getTeamByType(getTypeAtTime(game, x.target, x.day)) === "Werewolf";
        }).length;
      }
    },
    nocopy: {
      names: {
        5: "優柔不断"
      },
      func: function(game, pl) {
        if (pl.type === "Copier") {
          return 1;
        } else {
          return 0;
        }
      }
    },
    day2hanged: {
      names: {
        20: "怪しい人"
      },
      func: function(game, pl) {
        return game.gamelogs.filter(function(x) {
          return x.id === pl.id && x.event === "found" && x.flag === "punish" && x.day === 2;
        }).length;
      }
    },
    allgamecount: {
      names: {
        5: "ビギナー",
        15: "ルーキー",
        30: "経験者",
        50: "エリート",
        75: "エース",
        100: "キャプテン",
        150: "ベテラン",
        200: "歴戦の絆",
        300: "百戦錬磨",
        400: "カリスマ",
        500: "アルティメット",
        600: "超電磁砲",
        750: "不敗神話",
        1000: "永遠の旅人",
        1250: "冥王",
        1500: "終末の巨人",
        2000: "レジェンド"
      },
      func: function(game, pl) {
        return 1;
      }
    },
    aliveatlast: {
      names: {
        30: "最終兵器"
      },
      func: function(game, pl) {
        if (pl.dead) {
          return 0;
        } else {
          return 1;
        }
      }
    }
  };
